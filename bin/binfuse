#!/usr/bin/env ruby
require 'gli'
require 'paint'
require 'progress_bar'

begin # XXX: Remove this begin/rescue before distributing your app
require 'binfuse'
rescue LoadError
  STDERR.puts "In development, you need to use `bundle exec bin/binfuse` to run your app"
  STDERR.puts "At install-time, RubyGems will make sure lib, etc. are in the load path"
  STDERR.puts "Feel free to remove this message from bin/binfuse now"
  exit 64
end

include GLI::App

program_desc 'Describe your application here'

version Binfuse::VERSION

desc 'Describe some switch here'
switch [:s,:switch]

desc 'Describe some flag here'
default_value 'the default'
arg_name 'The name of the argument'
flag [:f,:flagname]

desc 'Describe create here'
arg_name 'Describe arguments to create here'
command :create do |c|
  c.desc 'use base image IMAGE'
  c.default_value 'Ubuntu x64'
  c.flag [:m,'base-image']
  
  c.desc 'use build file FILE'
  c.default_value 'Buildfile'
  c.flag [:b,'build-file']
  
  c.desc 'Describe a switch to create'
  c.switch :s

  c.desc 'Describe a flag to create'
  c.default_value 'default'
  c.flag :f
  c.action do |global_options,options,args|

    # Your command logic here
    puts Console::INFO + 'Downloading Base Image ' + Paint[ options[:m], :bold]
    
    bar = ProgressBar.new(100, :bar, :elapsed, :eta)
    100.times do
      sleep 0.06
      bar.increment! 1
    end
    puts Console::INFO + 'Download Complete'
    
    puts Console::INFO + 'Loading Build File: '    + Paint[ options[:b], :bold]
    puts Console::INFO + 'Building Image'
    puts Console::Indent(1) + Paint['Installing Package "Nginx"',   :white]; sleep 1
    puts Console::Indent(1) + Paint['Installing Package "Node.js"', :white]; sleep 1
    puts Console::Indent(1) + Paint['Installing Service Container', :white]; sleep 1
    puts Console::Indent(1) + Paint['Installing Application', :white]; sleep 1
    
    puts Console::INFO + 'Running Tests ...'
    puts Console::Indent(1) + Paint['Testing Application Failover', :white] + Paint[" \u2714 Okay", :green]; sleep 1
    puts Console::Indent(1) + Paint['Testing System Startup', :white] + Paint[" \u2714 Okay", :green]; sleep 1
    puts Console::Indent(1) + Paint['Testing Crash Recovery', :white] + Paint[" \u2714 Okay", :green]; sleep 1
    
    puts Console::INFO + 'Saving Image'
    
    # If you have any errors, just raise them
    # raise "that command made no sense"
    
    puts Console::DONE + 'Image Creation Done!'
    puts Console::INFO + 'Use ' + \
      Paint['binfuse spawn myapp@38ddf2', :white] + \
      ' to attach and run this image'
    
  end
end

desc 'Initialize a new Buildfile'
# arg_name 'Describe arguments to test here'
command :init do |c|
  c.action do |global_options,options,args|
    STDOUT.sync = true
    default = "Nodejs"
    print "Project Type #{default}: "
    type = gets.chomp
    if type==''
      type = default
    end
    puts "Initializing New #{type} Project"
  end
end

desc 'Describe test here'
arg_name 'Describe arguments to test here'
command :test do |c|
  c.action do |global_options,options,args|
    puts "test command ran"
  end
end

desc 'Describe spawn here'
arg_name 'Describe arguments to spawn here'
command :spawn do |c|
  c.action do |global_options,options,args|
    puts "spawn command ran"
  end
end

desc 'Describe publish here'
arg_name 'Describe arguments to publish here'
command :publish do |c|
  c.action do |global_options,options,args|
    puts "publish command ran"
  end
end

pre do |global,command,options,args|
  # Pre logic here
  # Return true to proceed; false to abort and not call the
  # chosen command
  # Use skips_pre before a command to skip this block
  # on that command only
  true
end

post do |global,command,options,args|
  # Post logic here
  # Use skips_post before a command to skip this
  # block on that command only
end

on_error do |exception|
  # Error logic here
  # return false to skip default error handling
  true
end

exit run(ARGV)
